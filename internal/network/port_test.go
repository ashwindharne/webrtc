package network

import (
	"reflect"
	"testing"

	"github.com/pions/webrtc/pkg/rtcp"
)

func TestHandleRTCP(t *testing.T) {
	for _, test := range []struct {
		Name      string
		RawPacket []byte
		WantTypes []rtcp.PacketType
	}{
		{
			// An RTCP packet from a packet dump
			Name: "Real RR",
			RawPacket: []byte{
				// Receiver Report (offset=0)
				// v=2, p=0, count=1, RR, len=7
				0x81, 0xc9, 0x0, 0x7,
				// ssrc=0x902f9e2e
				0x90, 0x2f, 0x9e, 0x2e,
				// ssrc=0xbc5e9a40
				0xbc, 0x5e, 0x9a, 0x40,
				// fracLost=0, totalLost=0
				0x0, 0x0, 0x0, 0x0,
				// lastSeq=0x46e1
				0x0, 0x0, 0x46, 0xe1,
				// jitter=273
				0x0, 0x0, 0x1, 0x11,
				// lsr=0x9f36432
				0x9, 0xf3, 0x64, 0x32,
				// delay=150137
				0x0, 0x2, 0x4a, 0x79,

				// Source Description (offset=32)
				// v=2, p=0, count=1, SDES, len=12
				0x81, 0xca, 0x0, 0xc,
				// ssrc=0x902f9e2e
				0x90, 0x2f, 0x9e, 0x2e,
				// CNAME, len=38
				0x1, 0x26,
				// text="{9c00eb92-1afb-9d49-a47d-91f64eee69f5}"
				0x7b, 0x39, 0x63, 0x30,
				0x30, 0x65, 0x62, 0x39,
				0x32, 0x2d, 0x31, 0x61,
				0x66, 0x62, 0x2d, 0x39,
				0x64, 0x34, 0x39, 0x2d,
				0x61, 0x34, 0x37, 0x64,
				0x2d, 0x39, 0x31, 0x66,
				0x36, 0x34, 0x65, 0x65,
				0x65, 0x36, 0x39, 0x66,
				0x35, 0x7d,
				// END + padding
				0x0, 0x0, 0x0, 0x0,

				// Goodbye (offset=84)
				// v=2, p=0, count=1, BYE, len=1
				0x81, 0xcb, 0x0, 0x1,
				// source=0x902f9e2e
				0x90, 0x2f, 0x9e, 0x2e,

				// Picture Loss Indication (offset=92)
				0x81, 0xce, 0x0, 0x2,
				// sender=0x902f9e2e
				0x90, 0x2f, 0x9e, 0x2e,
				// media=0x902f9e2e
				0x90, 0x2f, 0x9e, 0x2e,

				// RapidResynchronizationRequest (offset=104)
				0x85, 0xcd, 0x0, 0x2,
				// sender=0x902f9e2e
				0x90, 0x2f, 0x9e, 0x2e,
				// media=0x902f9e2e
				0x90, 0x2f, 0x9e, 0x2e,
			},
			WantTypes: []rtcp.PacketType{
				rtcp.TypeReceiverReport,
				rtcp.TypeSourceDescription,
				rtcp.TypeGoodbye,
				rtcp.TypePayloadSpecificFeedback,
				rtcp.TypeTransportSpecificFeedback,
			},
		},
		{
			Name: "sender report",
			RawPacket: []byte{
				// v=2, p=0, count=1, SR, len=12
				0x81, 0xc8, 0x00, 0x0c,
				// ssrc=0x902f9e2e
				0x90, 0x2f, 0x9e, 0x2e,
				// ntp=0xda8bd1fcdddda05a
				0xda, 0x8b, 0xd1, 0xfc,
				0xdd, 0xdd, 0xa0, 0x5a,
				// rtp=0xaaf4edd5
				0xaa, 0xf4, 0xed, 0xd5,
				// packetCount=1
				0x00, 0x00, 0x00, 0x01,
				// octetCount=2
				0x00, 0x00, 0x00, 0x02,
				// ssrc=0xbc5e9a40
				0xbc, 0x5e, 0x9a, 0x40,
				// fracLost=0, totalLost=0
				0x0, 0x0, 0x0, 0x0,
				// lastSeq=0x46e1
				0x0, 0x0, 0x46, 0xe1,
				// jitter=273
				0x0, 0x0, 0x1, 0x11,
				// lsr=0x9f36432
				0x9, 0xf3, 0x64, 0x32,
				// delay=150137
				0x0, 0x2, 0x4a, 0x79,
			},
			WantTypes: []rtcp.PacketType{
				rtcp.TypeSenderReport,
			},
		},
	} {
		pktChannel := make(chan rtcp.Packet, 6)
		getBufStub := func(uint32) *TransportPair {
			return &TransportPair{nil, pktChannel}
		}

		handleRTCP(getBufStub, test.RawPacket)
		close(pktChannel)

		var gotTypes []rtcp.PacketType
		for pkt := range pktChannel {
			gotTypes = append(gotTypes, pkt.Header().Type)
		}

		if !reflect.DeepEqual(gotTypes, test.WantTypes) {
			t.Fatalf("Got packet types %v, want %v", gotTypes, test.WantTypes)
		}
	}
}
